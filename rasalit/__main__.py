import pathlib
import subprocess
import numpy as np
import pandas as pd
import click
from pkg_resources import resource_filename


def app_path(py_file):
    found_path = resource_filename("rasalit", py_file)
    assert pathlib.Path(found_path).exists()
    return found_path


@click.group()
def main():
    """Helper Views for Rasa NLU"""
    pass


@click.command()
@click.option('--port', default=8501, help='Port number, default=8501.')
def overview(port):
    """Gives an overview of all results generated by `rasa train`."""
    app = app_path("viewresults.py")
    click.echo(click.style(f'Starting up {app}', fg='green'))
    print(app)
    subprocess.run(["streamlit", "run", "--server.port", str(port), app])


@click.command()
@click.option('--port', default=8501, help='Port number, default=8501.')
def diet_explorer(port):
    """Allows you to explore the DIET settings."""
    app = app_path("html/diet")
    click.echo(click.style(f'Starting up {app}', fg='green'))
    subprocess.run(["python", "-m", "http.server", str(port), "--directory", app])


def select_correct_subset(df, columns=tuple()):
    if len(columns) == 0:
        print("Warning: no columns passed so I'll not do a subset.")
        columns = df.columns
    df = df[columns]
    
    # drop non-unique columns
    cols_to_drop = [c for c in columns if df[c].nunique() == 1]
    df = df.drop(columns=cols_to_drop)
    for col in cols_to_drop:
        print(f"Warning: {col} has only one value -> dropping.")
    
    # drop nan columns 
    for col in df.columns:
        if df[col].isna().all():
            print(f"Warning: {col} only has NaN values -> dropping.")
            df = df.drop(columns=[col])
    
    # replace nan with zeros 
    for col in df.columns:
        df[col] = np.where(df[col].isna(), 0, df[col])
    return df.select_dtypes(include=['int64','float64'])


@click.command()
@click.argument('filename', type=click.Path(exists=True))
@click.argument('columns', nargs=-1)
@click.option('--port', default=8501, help='Port number, default=8501.')
def pcoords(filename, columns, port):
    """Parallel coordinates view of csv file *EXPERIMENTAL*."""
    df = pd.read_csv(filename)
    df = select_correct_subset(df, columns)
    print("Info: first few rows of dataframe")
    print(df.head())
    app = app_path("html/parallelcoords")
    df.to_csv(f"{app}/data.csv", index=False)
    click.echo(click.style(f'Starting up {app}', fg='green'))
    subprocess.run(["python", "-m", "http.server", str(port), "--directory", app])


main.add_command(overview)
main.add_command(diet_explorer)
main.add_command(pcoords)


if __name__ == "__main__":
    main()
